{"version":3,"file":"previewScript.mjs","sources":["../../../../admin/src/preview/utils/previewScript.ts"],"sourcesContent":["// NOTE: This override is for the properties on _user's site_, it's not about Strapi Admin.\ndeclare global {\n  interface Window {\n    __strapi_previewCleanup?: () => void;\n    STRAPI_HIGHLIGHT_HOVER_COLOR?: string;\n    STRAPI_HIGHLIGHT_ACTIVE_COLOR?: string;\n    STRAPI_DISABLE_STEGA_DECODING?: boolean;\n  }\n}\n\n/**\n * previewScript will be injected into the preview iframe after being stringified.\n * Therefore it CANNOT use any imports, or refer to any variables outside of its own scope.\n * It's why many functions are defined within previewScript, it's the only way to avoid going full spaghetti.\n * To get a better overview of everything previewScript does, go to the orchestration part at its end.\n */\nconst previewScript = (shouldRun = true) => {\n  /* -----------------------------------------------------------------------------------------------\n   * Params\n   * ---------------------------------------------------------------------------------------------*/\n  const HIGHLIGHT_PADDING = 2; // in pixels\n  const HIGHLIGHT_HOVER_COLOR = window.STRAPI_HIGHLIGHT_HOVER_COLOR ?? '#4945ff'; // dark primary500\n  const HIGHLIGHT_ACTIVE_COLOR = window.STRAPI_HIGHLIGHT_ACTIVE_COLOR ?? '#7b79ff'; // dark primary600\n\n  const DISABLE_STEGA_DECODING = window.STRAPI_DISABLE_STEGA_DECODING ?? false;\n  const SOURCE_ATTRIBUTE = 'data-strapi-source';\n  const OVERLAY_ID = 'strapi-preview-overlay';\n  const INTERNAL_EVENTS = {\n    STRAPI_FIELD_FOCUS: 'strapiFieldFocus',\n    STRAPI_FIELD_BLUR: 'strapiFieldBlur',\n    STRAPI_FIELD_CHANGE: 'strapiFieldChange',\n    STRAPI_FIELD_FOCUS_INTENT: 'strapiFieldFocusIntent',\n  } as const;\n\n  /**\n   * Calling the function in no-run mode lets us retrieve the constants from other files and keep\n   * a single source of truth for them. It's the only way to do this because this script can't\n   * refer to any variables outside of its own scope, because it's stringified before it's run.\n   */\n  if (!shouldRun) {\n    return { INTERNAL_EVENTS };\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * Utils\n   * ---------------------------------------------------------------------------------------------*/\n\n  const sendMessage = (\n    type: (typeof INTERNAL_EVENTS)[keyof typeof INTERNAL_EVENTS],\n    payload: unknown\n  ) => {\n    window.parent.postMessage({ type, payload }, '*');\n  };\n\n  const getElementsByPath = (path: string) => {\n    return document.querySelectorAll(`[${SOURCE_ATTRIBUTE}*=\"path=${path}\"]`);\n  };\n\n  /* -----------------------------------------------------------------------------------------------\n   * Functionality pieces\n   * ---------------------------------------------------------------------------------------------*/\n\n  const setupStegaDOMObserver = async () => {\n    if (DISABLE_STEGA_DECODING) {\n      return;\n    }\n\n    const { vercelStegaDecode: stegaDecode, vercelStegaClean: stegaClean } = await import(\n      // @ts-expect-error it's not a local dependency\n      // eslint-disable-next-line import/no-unresolved\n      'https://cdn.jsdelivr.net/npm/@vercel/stega@0.1.2/+esm'\n    );\n\n    const applyStegaToElement = (element: Element) => {\n      const directTextNodes = Array.from(element.childNodes).filter(\n        (node) => node.nodeType === Node.TEXT_NODE\n      );\n\n      const directTextContent = directTextNodes.map((node) => node.textContent || '').join('');\n\n      if (directTextContent) {\n        try {\n          // TODO: check if we can call split instead of decode+clean\n          const result = stegaDecode(directTextContent);\n          if (result && 'strapiSource' in result) {\n            element.setAttribute(SOURCE_ATTRIBUTE, result.strapiSource);\n\n            // Remove encoded part from DOM text content (to avoid breaking links for example)\n            directTextNodes.forEach((node) => {\n              if (node.textContent) {\n                const cleanedText = stegaClean(node.textContent);\n                if (cleanedText !== node.textContent) {\n                  node.textContent = cleanedText;\n                }\n              }\n            });\n          }\n        } catch (error) {}\n      }\n    };\n\n    // Process all existing elements\n    const allElements = document.querySelectorAll('*');\n    Array.from(allElements).forEach(applyStegaToElement);\n\n    // Create observer for new elements and text changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        // Handle added nodes\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const element = node as Element;\n              // Process the added element\n              applyStegaToElement(element);\n              // Process all child elements\n              const childElements = element.querySelectorAll('*');\n              Array.from(childElements).forEach(applyStegaToElement);\n            }\n          });\n        }\n\n        // Handle text content changes\n        if (mutation.type === 'characterData' && mutation.target.parentElement) {\n          applyStegaToElement(mutation.target.parentElement);\n        }\n      });\n    });\n\n    observer.observe(document, {\n      childList: true,\n      subtree: true,\n      characterData: true,\n    });\n\n    return observer;\n  };\n\n  const createOverlaySystem = () => {\n    // Clean up before creating a new overlay so we can safely call previewScript multiple times\n    window.__strapi_previewCleanup?.();\n    document.getElementById(OVERLAY_ID)?.remove();\n\n    const overlay = document.createElement('div');\n    overlay.id = OVERLAY_ID;\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 9999;\n    `;\n\n    window.document.body.appendChild(overlay);\n    return overlay;\n  };\n\n  type EventListenersList = Array<{\n    element: HTMLElement | Window;\n    type: keyof HTMLElementEventMap | 'message';\n    handler: EventListener;\n  }>;\n\n  const createHighlightManager = (overlay: HTMLElement) => {\n    const elementsToHighlight = new Map<Element, HTMLElement>();\n    const eventListeners: EventListenersList = [];\n    const focusedHighlights: HTMLElement[] = [];\n    let focusedField: string | null = null;\n\n    const drawHighlight = (target: Element, highlight: HTMLElement) => {\n      if (!highlight) return;\n\n      const rect = target.getBoundingClientRect();\n      highlight.style.width = `${rect.width + HIGHLIGHT_PADDING * 2}px`;\n      highlight.style.height = `${rect.height + HIGHLIGHT_PADDING * 2}px`;\n      highlight.style.transform = `translate(${rect.left - HIGHLIGHT_PADDING}px, ${rect.top - HIGHLIGHT_PADDING}px)`;\n    };\n\n    const updateAllHighlights = () => {\n      elementsToHighlight.forEach((highlight, element) => {\n        drawHighlight(element, highlight);\n      });\n    };\n\n    const createHighlightForElement = (element: HTMLElement) => {\n      if (elementsToHighlight.has(element)) {\n        // Already has a highlight\n        return;\n      }\n\n      const highlight = document.createElement('div');\n      highlight.style.cssText = `\n        position: absolute;\n        outline: 2px solid transparent;\n        pointer-events: none;\n        border-radius: 2px;\n        background-color: transparent;\n        will-change: transform;\n        transition: outline-color 0.1s ease-in-out;\n      `;\n\n      // Move hover detection to the underlying element\n      const mouseEnterHandler = () => {\n        if (!focusedHighlights.includes(highlight)) {\n          highlight.style.outlineColor = HIGHLIGHT_HOVER_COLOR;\n        }\n      };\n      const mouseLeaveHandler = () => {\n        if (!focusedHighlights.includes(highlight)) {\n          highlight.style.outlineColor = 'transparent';\n        }\n      };\n      const doubleClickHandler = () => {\n        const sourceAttribute = element.getAttribute(SOURCE_ATTRIBUTE);\n        if (sourceAttribute) {\n          const rect = element.getBoundingClientRect();\n          sendMessage(INTERNAL_EVENTS.STRAPI_FIELD_FOCUS_INTENT, {\n            path: sourceAttribute,\n            position: {\n              top: rect.top,\n              left: rect.left,\n              right: rect.right,\n              bottom: rect.bottom,\n              width: rect.width,\n              height: rect.height,\n            },\n          });\n        }\n      };\n      const mouseDownHandler = (event: MouseEvent) => {\n        // Prevent default multi click to select behavior\n        if (event.detail >= 2) {\n          event.preventDefault();\n        }\n      };\n\n      element.addEventListener('mouseenter', mouseEnterHandler);\n      element.addEventListener('mouseleave', mouseLeaveHandler);\n      element.addEventListener('dblclick', doubleClickHandler);\n      element.addEventListener('mousedown', mouseDownHandler);\n\n      // Store event listeners for cleanup\n      eventListeners.push(\n        { element, type: 'mouseenter', handler: mouseEnterHandler },\n        { element, type: 'mouseleave', handler: mouseLeaveHandler },\n        { element, type: 'dblclick', handler: doubleClickHandler },\n        { element, type: 'mousedown', handler: mouseDownHandler as EventListener }\n      );\n\n      elementsToHighlight.set(element, highlight);\n      overlay.appendChild(highlight);\n      drawHighlight(element, highlight);\n    };\n\n    const removeHighlightForElement = (element: Element) => {\n      const highlight = elementsToHighlight.get(element);\n\n      if (!highlight) return;\n\n      highlight.remove();\n      elementsToHighlight.delete(element);\n\n      // Remove event listeners for this element\n      const listenersToRemove = eventListeners.filter((listener) => listener.element === element);\n      listenersToRemove.forEach(({ element, type, handler }) => {\n        element.removeEventListener(type, handler);\n      });\n\n      // Mutate eventListeners to remove listeners for this element\n      eventListeners.splice(\n        0,\n        eventListeners.length,\n        ...eventListeners.filter((listener) => listener.element !== element)\n      );\n    };\n\n    // Process all existing elements with source attributes\n    const initialElements = window.document.querySelectorAll(`[${SOURCE_ATTRIBUTE}]`);\n    Array.from(initialElements).forEach((element) => {\n      if (element instanceof HTMLElement) {\n        createHighlightForElement(element);\n      }\n    });\n\n    return {\n      get elements() {\n        return Array.from(elementsToHighlight.keys());\n      },\n      get highlights() {\n        return Array.from(elementsToHighlight.values());\n      },\n      updateAllHighlights,\n      eventListeners,\n      focusedHighlights,\n      createHighlightForElement,\n      removeHighlightForElement,\n      setFocusedField: (field: string | null) => {\n        focusedField = field;\n      },\n      getFocusedField: () => focusedField,\n    };\n  };\n\n  type HighlightManager = ReturnType<typeof createHighlightManager>;\n\n  /**\n   * We need to track scroll in all the element parents in order to keep the highlight position\n   * in sync with the element position. Listening to window scroll is not enough because the\n   * element can be inside one or more scrollable containers.\n   */\n  const setupScrollManagement = (highlightManager: HighlightManager) => {\n    const updateOnScroll = () => {\n      highlightManager.updateAllHighlights();\n    };\n\n    const scrollableElements = new Set<Element | Window>();\n    scrollableElements.add(window);\n\n    // Find all scrollable ancestors for all tracked elements and set up scroll listeners\n    highlightManager.elements.forEach((element) => {\n      let parent = element.parentElement;\n      while (parent) {\n        const computedStyle = window.getComputedStyle(parent);\n        const overflow = computedStyle.overflow + computedStyle.overflowX + computedStyle.overflowY;\n\n        if (overflow.includes('scroll') || overflow.includes('auto')) {\n          scrollableElements.add(parent);\n        }\n\n        parent = parent.parentElement;\n      }\n    });\n\n    // Add scroll listeners to all scrollable elements\n    scrollableElements.forEach((element) => {\n      if (element === window) {\n        window.addEventListener('scroll', updateOnScroll);\n        window.addEventListener('resize', updateOnScroll);\n      } else {\n        element.addEventListener('scroll', updateOnScroll);\n      }\n    });\n\n    const cleanup = () => {\n      scrollableElements.forEach((element) => {\n        if (element === window) {\n          window.removeEventListener('scroll', updateOnScroll);\n          window.removeEventListener('resize', updateOnScroll);\n        } else {\n          (element as Element).removeEventListener('scroll', updateOnScroll);\n        }\n      });\n    };\n\n    return { cleanup };\n  };\n\n  const setupObservers = (\n    highlightManager: HighlightManager,\n    stegaObserver: MutationObserver | undefined\n  ) => {\n    const resizeObserver = new ResizeObserver(() => {\n      highlightManager.updateAllHighlights();\n    });\n\n    const observeElementForResize = (element: Element) => {\n      resizeObserver.observe(element);\n    };\n\n    // Observe existing elements\n    highlightManager.elements.forEach(observeElementForResize);\n    resizeObserver.observe(document.documentElement);\n\n    // Create highlight observer to watch for new elements with source attributes\n    const highlightObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === SOURCE_ATTRIBUTE) {\n          const target = mutation.target as HTMLElement;\n          if (target.hasAttribute(SOURCE_ATTRIBUTE)) {\n            highlightManager.createHighlightForElement(target);\n            observeElementForResize(target);\n          } else {\n            highlightManager.removeHighlightForElement(target);\n          }\n        }\n\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const element = node as Element;\n              // Check if the added element has source attribute\n              if (element.hasAttribute(SOURCE_ATTRIBUTE) && element instanceof HTMLElement) {\n                highlightManager.createHighlightForElement(element);\n                observeElementForResize(element);\n              }\n              // Check all child elements for source attributes\n              const elementsWithSource = element.querySelectorAll(`[${SOURCE_ATTRIBUTE}]`);\n              Array.from(elementsWithSource).forEach((childElement) => {\n                if (childElement instanceof HTMLElement) {\n                  highlightManager.createHighlightForElement(childElement);\n                  observeElementForResize(childElement);\n                }\n              });\n            }\n          });\n\n          mutation.removedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const element = node as Element;\n              highlightManager.removeHighlightForElement(element);\n            }\n          });\n        }\n      });\n    });\n\n    highlightObserver.observe(document, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: [SOURCE_ATTRIBUTE],\n    });\n\n    return {\n      resizeObserver,\n      highlightObserver,\n      stegaObserver,\n    };\n  };\n\n  const setupEventHandlers = (highlightManager: HighlightManager) => {\n    const handleMessage = (event: MessageEvent) => {\n      if (!event.data?.type) return;\n\n      // The user typed in an input, reflect the change in the preview\n      if (event.data.type === INTERNAL_EVENTS.STRAPI_FIELD_CHANGE) {\n        const { field, value } = event.data.payload;\n        if (!field) return;\n\n        getElementsByPath(field).forEach((element) => {\n          if (element instanceof HTMLElement) {\n            element.textContent = value || '';\n          }\n        });\n\n        // Update highlight dimensions since the new text content may affect them\n        highlightManager.updateAllHighlights();\n        return;\n      }\n\n      // The user focused a new input, update the highlights in the preview\n      if (event.data.type === INTERNAL_EVENTS.STRAPI_FIELD_FOCUS) {\n        const { field } = event.data.payload;\n        if (!field) return;\n\n        // Clear existing focused highlights\n        highlightManager.focusedHighlights.forEach((highlight: HTMLElement) => {\n          highlight.style.outlineColor = 'transparent';\n        });\n        highlightManager.focusedHighlights.length = 0;\n\n        // Set new focused field and highlight matching elements\n        highlightManager.setFocusedField(field);\n        getElementsByPath(field).forEach((element, index) => {\n          if (index === 0) {\n            element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          }\n          const highlight =\n            highlightManager.highlights[Array.from(highlightManager.elements).indexOf(element)];\n          if (highlight) {\n            highlight.style.outlineColor = HIGHLIGHT_ACTIVE_COLOR;\n            highlight.style.outlineWidth = '3px';\n            highlightManager.focusedHighlights.push(highlight);\n          }\n        });\n        return;\n      }\n\n      // The user is no longer focusing an input, remove the highlights\n      if (event.data.type === INTERNAL_EVENTS.STRAPI_FIELD_BLUR) {\n        const { field } = event.data.payload;\n        if (field !== highlightManager.getFocusedField()) return;\n\n        highlightManager.focusedHighlights.forEach((highlight: HTMLElement) => {\n          highlight.style.outlineColor = 'transparent';\n          highlight.style.outlineWidth = '2px';\n        });\n        highlightManager.focusedHighlights.length = 0;\n        highlightManager.setFocusedField(null);\n      }\n    };\n\n    window.addEventListener('message', handleMessage);\n\n    // Add the message handler to the cleanup list\n    const messageEventListener = {\n      element: window,\n      type: 'message' as keyof HTMLElementEventMap,\n      handler: handleMessage as EventListener,\n    };\n\n    return [...highlightManager.eventListeners, messageEventListener];\n  };\n\n  const createCleanupSystem = (\n    overlay: HTMLElement,\n    observers: ReturnType<typeof setupObservers>,\n    scrollManager: ReturnType<typeof setupScrollManagement>,\n    eventHandlers: EventListenersList\n  ) => {\n    window.__strapi_previewCleanup = () => {\n      observers.resizeObserver.disconnect();\n      observers.highlightObserver.disconnect();\n      observers.stegaObserver?.disconnect();\n\n      // Clean up scroll listeners\n      scrollManager.cleanup();\n\n      // Remove highlight event listeners\n      eventHandlers.forEach(({ element, type, handler }) => {\n        element.removeEventListener(type, handler);\n      });\n\n      overlay.remove();\n    };\n  };\n\n  /* -----------------------------------------------------------------------------------------------\n   * Orchestration\n   * ---------------------------------------------------------------------------------------------*/\n\n  setupStegaDOMObserver().then((stegaObserver) => {\n    const overlay = createOverlaySystem();\n    const highlightManager = createHighlightManager(overlay);\n    const observers = setupObservers(highlightManager, stegaObserver);\n    const scrollManager = setupScrollManagement(highlightManager);\n    const eventHandlers = setupEventHandlers(highlightManager);\n    createCleanupSystem(overlay, observers, scrollManager, eventHandlers);\n  });\n};\n\nexport { previewScript };\n"],"names":["previewScript","shouldRun","HIGHLIGHT_PADDING","HIGHLIGHT_HOVER_COLOR","window","STRAPI_HIGHLIGHT_HOVER_COLOR","HIGHLIGHT_ACTIVE_COLOR","STRAPI_HIGHLIGHT_ACTIVE_COLOR","DISABLE_STEGA_DECODING","STRAPI_DISABLE_STEGA_DECODING","SOURCE_ATTRIBUTE","OVERLAY_ID","INTERNAL_EVENTS","STRAPI_FIELD_FOCUS","STRAPI_FIELD_BLUR","STRAPI_FIELD_CHANGE","STRAPI_FIELD_FOCUS_INTENT","sendMessage","type","payload","parent","postMessage","getElementsByPath","path","document","querySelectorAll","setupStegaDOMObserver","vercelStegaDecode","stegaDecode","vercelStegaClean","stegaClean","applyStegaToElement","element","directTextNodes","Array","from","childNodes","filter","node","nodeType","Node","TEXT_NODE","directTextContent","map","textContent","join","result","setAttribute","strapiSource","forEach","cleanedText","error","allElements","observer","MutationObserver","mutations","mutation","addedNodes","ELEMENT_NODE","childElements","target","parentElement","observe","childList","subtree","characterData","createOverlaySystem","__strapi_previewCleanup","getElementById","remove","overlay","createElement","id","style","cssText","body","appendChild","createHighlightManager","elementsToHighlight","Map","eventListeners","focusedHighlights","focusedField","drawHighlight","highlight","rect","getBoundingClientRect","width","height","transform","left","top","updateAllHighlights","createHighlightForElement","has","mouseEnterHandler","includes","outlineColor","mouseLeaveHandler","doubleClickHandler","sourceAttribute","getAttribute","position","right","bottom","mouseDownHandler","event","detail","preventDefault","addEventListener","push","handler","set","removeHighlightForElement","get","delete","listenersToRemove","listener","removeEventListener","splice","length","initialElements","HTMLElement","elements","keys","highlights","values","setFocusedField","field","getFocusedField","setupScrollManagement","highlightManager","updateOnScroll","scrollableElements","Set","add","computedStyle","getComputedStyle","overflow","overflowX","overflowY","cleanup","setupObservers","stegaObserver","resizeObserver","ResizeObserver","observeElementForResize","documentElement","highlightObserver","attributeName","hasAttribute","elementsWithSource","childElement","removedNodes","attributes","attributeFilter","setupEventHandlers","handleMessage","data","value","index","scrollIntoView","behavior","block","indexOf","outlineWidth","messageEventListener","createCleanupSystem","observers","scrollManager","eventHandlers","disconnect","then"],"mappings":"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"}